AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Parameters:
  NumberOfWorkers:
    Type: Number
    Description: 'How many concurrent workers do you want'
    Default: 4
  NumberOfChunks:
    Type: Number
    Description: 'How many index files do you want to consider'
    Default: 2
  IndexBucket:
    Type: String
    Description: 'Bucket to look for the index key'
    Default: 'commoncrawl'
  IndexKey:
    Type: String
    Description: 'Key for the index object'
    Default: 'crawl-data/CC-MAIN-2018-17/warc.paths.gz'
  SearchRegex:
    Type: String
    Description: 'The regular expression to apply to the data chunks'
    Default: '(\([0-9]{3}\) |[0-9]{3}-)[0-9]{3}-[0-9]{4}'

Resources:
  Drainer:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.metric_handler
      Runtime: nodejs8.10
      MemorySize: 128
      Timeout: 5
      Policies:
        - SQSPollerPolicy:
             QueueName:
                Fn::GetAtt: [ "MetricQueue", "QueueName" ]
        - CloudWatchPutMetricPolicy: {}

  DrainerTrigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      BatchSize: 10
      Enabled: true
      EventSourceArn: !GetAtt MetricQueue.Arn
      FunctionName: !GetAtt Drainer.Arn

  DeDuper:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "DeDuper-${AWS::StackName}"
      AttributeDefinitions:
        -
          AttributeName: "run_id"
          AttributeType: "S"
        -
          AttributeName: "data"
          AttributeType: "S"
      KeySchema:
        -
          AttributeName: "run_id"
          KeyType: "HASH"
        -
          AttributeName: "data"
          KeyType: "RANGE"
      ProvisionedThroughput:
        ReadCapacityUnits: "1"
        WriteCapacityUnits: "3"

  Worker:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      Runtime: nodejs8.10
      MemorySize: 1024
      Timeout: 300
      Policies:
        - SQSPollerPolicy:
             QueueName:
                Fn::GetAtt: [ "CrawlQueue", "QueueName" ]
        - SQSPollerPolicy:
             QueueName:
                Fn::GetAtt: [ "MetricQueue", "QueueName" ]
        - SQSSendMessagePolicy:
             QueueName:
                Fn::GetAtt: [ "CrawlQueue", "QueueName" ]
        - SQSSendMessagePolicy:
             QueueName:
                Fn::GetAtt: [ "MetricQueue", "QueueName" ]
        - S3ReadPolicy:
             BucketName: !Ref IndexBucket
        - CloudWatchPutMetricPolicy: {}
        # NB: this allows us to invoke all functions in the stack
        - LambdaInvokePolicy:
             FunctionName: !Ref AWS::StackName
      Environment:
        Variables:
          QUEUE_URL: !Ref CrawlQueue
          METRIC_URL: !Ref MetricQueue
          MAX_WORKERS: !Ref NumberOfWorkers
          MAX_CHUNKS: !Ref NumberOfChunks
          CRAWL_INDEX_BUCKET: !Ref IndexBucket
          CRAWL_INDEX_KEY: !Ref IndexKey
  CrawlQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 300
  MetricQueue:
    Type: AWS::SQS::Queue
    Properties:
      VisibilityTimeout: 30

Outputs:
  Worker:
    Value: !Ref Worker
  MetricQueue:
    Value: !GetAtt MetricQueue.QueueName
  CrawlQueue:
    Value: !GetAtt CrawlQueue.QueueName
